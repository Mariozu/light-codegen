package templates.hybrid;

import javax.annotation.Generated;
import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import com.jsoniter.any.Any;

/*
 * Auto generated code to render template templates/hybrid/handler.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@Generated("com.fizzed.rocker.compiler.JavaGenerator") @SuppressWarnings("unused")
public class handler extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public final com.fizzed.rocker.ContentType CONTENT_TYPE = com.fizzed.rocker.ContentType.RAW;
    static public final String TEMPLATE_NAME = "handler.rocker.raw";
    static public final String TEMPLATE_PACKAGE_NAME = "templates.hybrid";
    static public final String HEADER_HASH = "660718394";
    static public final long MODIFIED_AT = 1518543981000L;
    static public final String[] ARGUMENT_NAMES = { "handlerPackage", "host", "service", "item", "example" };

    // argument @ [2:2]
    private String handlerPackage;
    // argument @ [2:2]
    private String host;
    // argument @ [2:2]
    private String service;
    // argument @ [2:2]
    private Any item;
    // argument @ [2:2]
    private String example;

    public handler handlerPackage(String handlerPackage) {
        this.handlerPackage = handlerPackage;
        return this;
    }

    public String handlerPackage() {
        return this.handlerPackage;
    }

    public handler host(String host) {
        this.host = host;
        return this;
    }

    public String host() {
        return this.host;
    }

    public handler service(String service) {
        this.service = service;
        return this;
    }

    public String service() {
        return this.service;
    }

    public handler item(Any item) {
        this.item = item;
        return this;
    }

    public Any item() {
        return this.item;
    }

    public handler example(String example) {
        this.example = example;
        return this;
    }

    public String example() {
        return this.example;
    }

    static public handler template(String handlerPackage, String host, String service, Any item, String example) {
        return new handler()
            .handlerPackage(handlerPackage)
            .host(host)
            .service(service)
            .item(item)
            .example(example);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \npackage 
        static private final byte[] PLAIN_TEXT_0_0;
        // ;\n\nimport com.networknt.utility.NioUtils;\nimport com.networknt.rpc.Handler;\nimport com.networknt.rpc.router.ServiceHandler;\nimport java.nio.ByteBuffer;\n\n@ServiceHandler(id=\"
        static private final byte[] PLAIN_TEXT_1_0;
        // /
        static private final byte[] PLAIN_TEXT_2_0;
        // \")\npublic class 
        static private final byte[] PLAIN_TEXT_3_0;
        //  implements Handler {\n    @Override\n    public ByteBuffer handle(Object input)  {\n        return NioUtils.toByteBuffer(\"
        static private final byte[] PLAIN_TEXT_4_0;
        // \");\n    }\n}\n
        static private final byte[] PLAIN_TEXT_5_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(handler.class.getClassLoader(), handler.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
        }

        // argument @ [2:2]
        protected final String handlerPackage;
        // argument @ [2:2]
        protected final String host;
        // argument @ [2:2]
        protected final String service;
        // argument @ [2:2]
        protected final Any item;
        // argument @ [2:2]
        protected final String example;

        public Template(handler model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(CONTENT_TYPE);
            __internal.setTemplateName(TEMPLATE_NAME);
            __internal.setTemplatePackageName(TEMPLATE_PACKAGE_NAME);
            this.handlerPackage = model.handlerPackage();
            this.host = model.host();
            this.service = model.service();
            this.item = model.item();
            this.example = model.example();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [2:85]
            __internal.aboutToExecutePosInTemplate(2, 85);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [3:9]
            __internal.aboutToExecutePosInTemplate(3, 9);
            __internal.renderValue(handlerPackage, false);
            // PlainText @ [3:24]
            __internal.aboutToExecutePosInTemplate(3, 24);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // ValueExpression @ [10:22]
            __internal.aboutToExecutePosInTemplate(10, 22);
            __internal.renderValue(host, false);
            // PlainText @ [10:27]
            __internal.aboutToExecutePosInTemplate(10, 27);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // ValueExpression @ [10:28]
            __internal.aboutToExecutePosInTemplate(10, 28);
            __internal.renderValue(service, false);
            // PlainText @ [10:36]
            __internal.aboutToExecutePosInTemplate(10, 36);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // ValueExpression @ [10:37]
            __internal.aboutToExecutePosInTemplate(10, 37);
            __internal.renderValue(item.get("name"), false);
            // PlainText @ [10:54]
            __internal.aboutToExecutePosInTemplate(10, 54);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // ValueExpression @ [10:55]
            __internal.aboutToExecutePosInTemplate(10, 55);
            __internal.renderValue(item.get("version"), false);
            // PlainText @ [10:75]
            __internal.aboutToExecutePosInTemplate(10, 75);
            __internal.writeValue(PLAIN_TEXT_3_0);
            // ValueExpression @ [11:14]
            __internal.aboutToExecutePosInTemplate(11, 14);
            __internal.renderValue(item.get("handler"), false);
            // PlainText @ [11:34]
            __internal.aboutToExecutePosInTemplate(11, 34);
            __internal.writeValue(PLAIN_TEXT_4_0);
            // ValueExpression @ [14:39]
            __internal.aboutToExecutePosInTemplate(14, 39);
            __internal.renderValue(example, false);
            // PlainText @ [14:47]
            __internal.aboutToExecutePosInTemplate(14, 47);
            __internal.writeValue(PLAIN_TEXT_5_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\npackage ";
        static private final String PLAIN_TEXT_1_0 = ";\n\nimport com.networknt.utility.NioUtils;\nimport com.networknt.rpc.Handler;\nimport com.networknt.rpc.router.ServiceHandler;\nimport java.nio.ByteBuffer;\n\n@ServiceHandler(id=\"";
        static private final String PLAIN_TEXT_2_0 = "/";
        static private final String PLAIN_TEXT_3_0 = "\")\npublic class ";
        static private final String PLAIN_TEXT_4_0 = " implements Handler {\n    @Override\n    public ByteBuffer handle(Object input)  {\n        return NioUtils.toByteBuffer(\"";
        static private final String PLAIN_TEXT_5_0 = "\");\n    }\n}\n";

    }

}
