package templates.hybrid;

import javax.annotation.Generated;
import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import com.jsoniter.any.Any;

/*
 * Auto generated code to render template templates/hybrid/handlerTest.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@Generated("com.fizzed.rocker.compiler.JavaGenerator") @SuppressWarnings("unused")
public class handlerTest extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public final com.fizzed.rocker.ContentType CONTENT_TYPE = com.fizzed.rocker.ContentType.RAW;
    static public final String TEMPLATE_NAME = "handlerTest.rocker.raw";
    static public final String TEMPLATE_PACKAGE_NAME = "templates.hybrid";
    static public final String HEADER_HASH = "1130341158";
    static public final long MODIFIED_AT = 1518543981000L;
    static public final String[] ARGUMENT_NAMES = { "handlerPackage", "host", "service", "item" };

    // argument @ [2:2]
    private String handlerPackage;
    // argument @ [2:2]
    private String host;
    // argument @ [2:2]
    private String service;
    // argument @ [2:2]
    private Any item;

    public handlerTest handlerPackage(String handlerPackage) {
        this.handlerPackage = handlerPackage;
        return this;
    }

    public String handlerPackage() {
        return this.handlerPackage;
    }

    public handlerTest host(String host) {
        this.host = host;
        return this;
    }

    public String host() {
        return this.host;
    }

    public handlerTest service(String service) {
        this.service = service;
        return this;
    }

    public String service() {
        return this.service;
    }

    public handlerTest item(Any item) {
        this.item = item;
        return this;
    }

    public Any item() {
        return this.item;
    }

    static public handlerTest template(String handlerPackage, String host, String service, Any item) {
        return new handlerTest()
            .handlerPackage(handlerPackage)
            .host(host)
            .service(service)
            .item(item);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \npackage 
        static private final byte[] PLAIN_TEXT_0_0;
        // ;\n\nimport com.networknt.client.Http2Client;\nimport com.networknt.exception.ApiException;\nimport com.networknt.exception.ClientException;\nimport io.undertow.UndertowOptions;\nimport io.undertow.client.ClientConnection;\nimport io.undertow.client.ClientRequest;\nimport io.undertow.client.ClientResponse;\nimport io.undertow.util.Headers;\nimport io.undertow.util.Methods;\nimport org.junit.Assert;\nimport org.junit.ClassRule;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4...
        static private final byte[] PLAIN_TEXT_1_0;
        // public class 
        static private final byte[] PLAIN_TEXT_2_0;
        //  {\n    @ClassRule\n    public static TestServer server = TestServer.getInstance();\n\n    
        static private final byte[] PLAIN_TEXT_3_0;
        // static final Logger logger = LoggerFactory.getLogger(
        static private final byte[] PLAIN_TEXT_4_0;
        // ); 
        static private final byte[] PLAIN_TEXT_5_0;
        // \n    static final boolean enableHttp2 = server.getServerConfig().isEnableHttp2();\n    static final boolean enableHttps = server.getServerConfig().isEnableHttps();\n    static final int httpPort = server.getServerConfig().getHttpPort();\n    static final int httpsPort = server.getServerConfig().getHttpsPort();\n    static final String url = enableHttp2 || enableHttps ? \"https://localhost:\" + httpsPort : \"http://localhost:\" + httpPort;\n\n    @Test\n    
        static private final byte[] PLAIN_TEXT_6_0;
        // public void test
        static private final byte[] PLAIN_TEXT_7_0;
        //  throws ClientException, ApiException {\n        /*\n        final Http2Client client = Http2Client.getInstance();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final ClientConnection connection;\n        try {\n            connection = client.connect(new URI(url), Http2Client.WORKER, Http2Client.SSL, Http2Client.POOL, enableHttp2 ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true): OptionMap.EMPTY).get();\n        } catch (Exception e) {\n            throw new Clie...
        static private final byte[] PLAIN_TEXT_8_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(handlerTest.class.getClassLoader(), handlerTest.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
        }

        // argument @ [2:2]
        protected final String handlerPackage;
        // argument @ [2:2]
        protected final String host;
        // argument @ [2:2]
        protected final String service;
        // argument @ [2:2]
        protected final Any item;

        public Template(handlerTest model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(CONTENT_TYPE);
            __internal.setTemplateName(TEMPLATE_NAME);
            __internal.setTemplatePackageName(TEMPLATE_PACKAGE_NAME);
            this.handlerPackage = model.handlerPackage();
            this.host = model.host();
            this.service = model.service();
            this.item = model.item();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [2:69]
            __internal.aboutToExecutePosInTemplate(2, 69);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [3:9]
            __internal.aboutToExecutePosInTemplate(3, 9);
            __internal.renderValue(handlerPackage, false);
            // PlainText @ [3:24]
            __internal.aboutToExecutePosInTemplate(3, 24);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // WithBlockBegin @ [26:1]
            __internal.aboutToExecutePosInTemplate(26, 1);
            com.fizzed.rocker.runtime.WithBlock.with(item.get("handler") + "Test", false, (s1) -> {
                // PlainText @ [26:43]
                __internal.aboutToExecutePosInTemplate(26, 43);
                __internal.writeValue(PLAIN_TEXT_2_0);
                // ValueExpression @ [26:56]
                __internal.aboutToExecutePosInTemplate(26, 56);
                __internal.renderValue(s1, false);
                // WithBlockEnd @ [26:1]
                __internal.aboutToExecutePosInTemplate(26, 1);
            }); // with end @ [26:1]
            // PlainText @ [26:60]
            __internal.aboutToExecutePosInTemplate(26, 60);
            __internal.writeValue(PLAIN_TEXT_3_0);
            // WithBlockBegin @ [30:5]
            __internal.aboutToExecutePosInTemplate(30, 5);
            com.fizzed.rocker.runtime.WithBlock.with(item.get("handler") + ".class", false, (s2) -> {
                // PlainText @ [30:49]
                __internal.aboutToExecutePosInTemplate(30, 49);
                __internal.writeValue(PLAIN_TEXT_4_0);
                // ValueExpression @ [30:102]
                __internal.aboutToExecutePosInTemplate(30, 102);
                __internal.renderValue(s2, false);
                // PlainText @ [30:105]
                __internal.aboutToExecutePosInTemplate(30, 105);
                __internal.writeValue(PLAIN_TEXT_5_0);
                // WithBlockEnd @ [30:5]
                __internal.aboutToExecutePosInTemplate(30, 5);
            }); // with end @ [30:5]
            // PlainText @ [30:109]
            __internal.aboutToExecutePosInTemplate(30, 109);
            __internal.writeValue(PLAIN_TEXT_6_0);
            // WithBlockBegin @ [38:5]
            __internal.aboutToExecutePosInTemplate(38, 5);
            com.fizzed.rocker.runtime.WithBlock.with(item.get("handler") + "()", false, (s3) -> {
                // PlainText @ [38:45]
                __internal.aboutToExecutePosInTemplate(38, 45);
                __internal.writeValue(PLAIN_TEXT_7_0);
                // ValueExpression @ [38:61]
                __internal.aboutToExecutePosInTemplate(38, 61);
                __internal.renderValue(s3, false);
                // WithBlockEnd @ [38:5]
                __internal.aboutToExecutePosInTemplate(38, 5);
            }); // with end @ [38:5]
            // PlainText @ [38:65]
            __internal.aboutToExecutePosInTemplate(38, 65);
            __internal.writeValue(PLAIN_TEXT_8_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\npackage ";
        static private final String PLAIN_TEXT_1_0 = ";\n\nimport com.networknt.client.Http2Client;\nimport com.networknt.exception.ApiException;\nimport com.networknt.exception.ClientException;\nimport io.undertow.UndertowOptions;\nimport io.undertow.client.ClientConnection;\nimport io.undertow.client.ClientRequest;\nimport io.undertow.client.ClientResponse;\nimport io.undertow.util.Headers;\nimport io.undertow.util.Methods;\nimport org.junit.Assert;\nimport org.junit.ClassRule;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xnio.IoUtils;\nimport org.xnio.OptionMap;\n\nimport java.net.URI;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.atomic.AtomicReference;\n\n";
        static private final String PLAIN_TEXT_2_0 = "public class ";
        static private final String PLAIN_TEXT_3_0 = " {\n    @ClassRule\n    public static TestServer server = TestServer.getInstance();\n\n    ";
        static private final String PLAIN_TEXT_4_0 = "static final Logger logger = LoggerFactory.getLogger(";
        static private final String PLAIN_TEXT_5_0 = "); ";
        static private final String PLAIN_TEXT_6_0 = "\n    static final boolean enableHttp2 = server.getServerConfig().isEnableHttp2();\n    static final boolean enableHttps = server.getServerConfig().isEnableHttps();\n    static final int httpPort = server.getServerConfig().getHttpPort();\n    static final int httpsPort = server.getServerConfig().getHttpsPort();\n    static final String url = enableHttp2 || enableHttps ? \"https://localhost:\" + httpsPort : \"http://localhost:\" + httpPort;\n\n    @Test\n    ";
        static private final String PLAIN_TEXT_7_0 = "public void test";
        static private final String PLAIN_TEXT_8_0 = " throws ClientException, ApiException {\n        /*\n        final Http2Client client = Http2Client.getInstance();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final ClientConnection connection;\n        try {\n            connection = client.connect(new URI(url), Http2Client.WORKER, Http2Client.SSL, Http2Client.POOL, enableHttp2 ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true): OptionMap.EMPTY).get();\n        } catch (Exception e) {\n            throw new ClientException(e);\n        }\n        final AtomicReference<ClientResponse> reference = new AtomicReference<>();\n        try {\n            ClientRequest request = new ClientRequest().setPath(\"/api/json\").setMethod(Methods.POST);\n            request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n            connection.sendRequest(request, client.createClientCallback(reference, latch, \"request body to be replaced\"));\n            latch.await();\n        } catch (Exception e) {\n            logger.error(\"Exception: \", e);\n            throw new ClientException(e);\n        } finally {\n            IoUtils.safeClose(connection);\n        }\n        int statusCode = reference.get().getResponseCode();\n        String body = reference.get().getAttachment(Http2Client.RESPONSE_BODY);\n        Assert.assertEquals(200, statusCode);\n        Assert.assertNotNull(body);\n        */\n    }\n}";

    }

}
