package templates.rest;

import javax.annotation.Generated;
import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;

/*
 * Auto generated code to render template templates/rest/secret.yml.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@Generated("com.fizzed.rocker.compiler.JavaGenerator") @SuppressWarnings("unused")
public class secret extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public final com.fizzed.rocker.ContentType CONTENT_TYPE = com.fizzed.rocker.ContentType.RAW;
    static public final String TEMPLATE_NAME = "secret.yml.rocker.raw";
    static public final String TEMPLATE_PACKAGE_NAME = "templates.rest";
    static public final String HEADER_HASH = "2508083";
    static public final long MODIFIED_AT = 1518543981000L;
    static public final String[] ARGUMENT_NAMES = { };

    static public secret template() {
        return new secret();
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // # This file contains all the secrets for the server and client in order to manage and\n# secure all of them in the same place. In Kubernetes, this file will be mapped to\n# Secrets and all other config files will be mapped to mapConfig\n\n---\n\n# Sever section\n\n# Key store password, the path of keystore is defined in server.yml\nserverKeystorePass: password\n\n# Key password, the key is in keystore\nserverKeyPass: password\n\n# Trust store password, the path of truststore is defined in ser...
        static private final byte[] PLAIN_TEXT_0_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(secret.class.getClassLoader(), secret.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
        }

        public Template(secret model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(CONTENT_TYPE);
            __internal.setTemplateName(TEMPLATE_NAME);
            __internal.setTemplatePackageName(TEMPLATE_PACKAGE_NAME);
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [1:1]
            __internal.aboutToExecutePosInTemplate(1, 1);
            __internal.writeValue(PLAIN_TEXT_0_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "# This file contains all the secrets for the server and client in order to manage and\n# secure all of them in the same place. In Kubernetes, this file will be mapped to\n# Secrets and all other config files will be mapped to mapConfig\n\n---\n\n# Sever section\n\n# Key store password, the path of keystore is defined in server.yml\nserverKeystorePass: password\n\n# Key password, the key is in keystore\nserverKeyPass: password\n\n# Trust store password, the path of truststore is defined in server.yml\nserverTruststorePass: password\n\n\n# Client section\n\n# Key store password, the path of keystore is defined in server.yml\nclientKeystorePass: password\n\n# Key password, the key is in keystore\nclientKeyPass: password\n\n# Trust store password, the path of truststore is defined in server.yml\nclientTruststorePass: password\n\n# Authorization code client secret for OAuth2 server\nauthorizationCodeClientSecret: f6h1FTI8Q3-7UScPZDzfXA\n\n# Client credentials client secret for OAuth2 server\nclientCredentialsClientSecret: f6h1FTI8Q3-7UScPZDzfXA\n\n# Key distribution client secret for OAuth2 server\nkeyClientSecret: f6h1FTI8Q3-7UScPZDzfXA\n\n# Consul service registry and discovery\n\n# Consul Token for service registry and discovery\n# consulToken: the_one_ring\n\n# EmailSender password\nemailPassword: change-to-real-password\n";

    }

}
