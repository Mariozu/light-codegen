package templates.rest;

import javax.annotation.Generated;
import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import com.jsoniter.any.Any;
// import @ [2:1]
import java.util.Map;
// import @ [3:1]
import java.util.List;

/*
 * Auto generated code to render template templates/rest/enumClass.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@Generated("com.fizzed.rocker.compiler.JavaGenerator") @SuppressWarnings("unused")
public class enumClass extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public final com.fizzed.rocker.ContentType CONTENT_TYPE = com.fizzed.rocker.ContentType.RAW;
    static public final String TEMPLATE_NAME = "enumClass.rocker.raw";
    static public final String TEMPLATE_PACKAGE_NAME = "templates.rest";
    static public final String HEADER_HASH = "968968722";
    static public final long MODIFIED_AT = 1518543981000L;
    static public final String[] ARGUMENT_NAMES = { "prop" };

    // argument @ [4:2]
    private Map<String,Any> prop;

    public enumClass prop(Map<String,Any> prop) {
        this.prop = prop;
        return this;
    }

    public Map<String,Any> prop() {
        return this.prop;
    }

    static public enumClass template(Map<String,Any> prop) {
        return new enumClass()
            .prop(prop);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n    
        static private final byte[] PLAIN_TEXT_0_0;
        // \n    public enum 
        static private final byte[] PLAIN_TEXT_1_0;
        //  {\n        
        static private final byte[] PLAIN_TEXT_2_0;
        // \n        
        static private final byte[] PLAIN_TEXT_3_0;
        //  (\"
        static private final byte[] PLAIN_TEXT_4_0;
        // \"),
        static private final byte[] PLAIN_TEXT_5_0;
        // \");
        static private final byte[] PLAIN_TEXT_6_0;
        // \n\n        private final 
        static private final byte[] PLAIN_TEXT_7_0;
        //  value;\n\n        
        static private final byte[] PLAIN_TEXT_8_0;
        // (
        static private final byte[] PLAIN_TEXT_9_0;
        //  value) {\n            this.value = value;\n        }\n\n        @Override\n        public String toString() {\n            return String.valueOf(value);\n        }\n\n        public static 
        static private final byte[] PLAIN_TEXT_10_0;
        //  fromValue(String text) {\n            for (
        static private final byte[] PLAIN_TEXT_11_0;
        //  b : 
        static private final byte[] PLAIN_TEXT_12_0;
        // ) {\n                if (String.valueOf(b.value).equals(text)) {\n                return b;\n                }\n            }\n            return null;\n        }\n    }\n\n    private 
        static private final byte[] PLAIN_TEXT_13_0;
        //  
        static private final byte[] PLAIN_TEXT_14_0;
        // ;\n\n    
        static private final byte[] PLAIN_TEXT_15_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(enumClass.class.getClassLoader(), enumClass.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
            PLAIN_TEXT_9_0 = loader.tryGet("PLAIN_TEXT_9_0");
            PLAIN_TEXT_10_0 = loader.tryGet("PLAIN_TEXT_10_0");
            PLAIN_TEXT_11_0 = loader.tryGet("PLAIN_TEXT_11_0");
            PLAIN_TEXT_12_0 = loader.tryGet("PLAIN_TEXT_12_0");
            PLAIN_TEXT_13_0 = loader.tryGet("PLAIN_TEXT_13_0");
            PLAIN_TEXT_14_0 = loader.tryGet("PLAIN_TEXT_14_0");
            PLAIN_TEXT_15_0 = loader.tryGet("PLAIN_TEXT_15_0");
        }

        // argument @ [4:2]
        protected final Map<String,Any> prop;

        public Template(enumClass model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(CONTENT_TYPE);
            __internal.setTemplateName(TEMPLATE_NAME);
            __internal.setTemplatePackageName(TEMPLATE_PACKAGE_NAME);
            this.prop = model.prop();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [4:30]
            __internal.aboutToExecutePosInTemplate(4, 30);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // WithBlockBegin @ [5:5]
            __internal.aboutToExecutePosInTemplate(5, 5);
            WithBlocksGenerated0.with(prop.get("nameWithEnum") + ".values()", prop.get("value").asList(), false, (v, value) -> {
                // PlainText @ [5:93]
                __internal.aboutToExecutePosInTemplate(5, 93);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ValueExpression @ [6:17]
                __internal.aboutToExecutePosInTemplate(6, 17);
                __internal.renderValue(prop.get("nameWithEnum"), false);
                // PlainText @ [6:42]
                __internal.aboutToExecutePosInTemplate(6, 42);
                __internal.writeValue(PLAIN_TEXT_2_0);
                // ForBlockBegin @ [7:9]
                __internal.aboutToExecutePosInTemplate(7, 9);
                try {
                    com.fizzed.rocker.runtime.Java8Iterator.forEach(value, (i,item) -> {
                        try {
                            // PlainText @ [7:35]
                            __internal.aboutToExecutePosInTemplate(7, 35);
                            __internal.writeValue(PLAIN_TEXT_3_0);
                            // WithBlockBegin @ [8:9]
                            __internal.aboutToExecutePosInTemplate(8, 9);
                            com.fizzed.rocker.runtime.WithBlock.with(item.toString().toUpperCase(), false, (u) -> {
                                // IfBlockBegin @ [8:51]
                                __internal.aboutToExecutePosInTemplate(8, 51);
                                if (i.index() <  value.size() - 1) {
                                    // ValueExpression @ [8:88]
                                    __internal.aboutToExecutePosInTemplate(8, 88);
                                    __internal.renderValue(u, false);
                                    // PlainText @ [8:90]
                                    __internal.aboutToExecutePosInTemplate(8, 90);
                                    __internal.writeValue(PLAIN_TEXT_4_0);
                                    // ValueExpression @ [8:93]
                                    __internal.aboutToExecutePosInTemplate(8, 93);
                                    __internal.renderValue(item, false);
                                    // PlainText @ [8:98]
                                    __internal.aboutToExecutePosInTemplate(8, 98);
                                    __internal.writeValue(PLAIN_TEXT_5_0);
                                    // IfBlockEnd @ [8:51]
                                    __internal.aboutToExecutePosInTemplate(8, 51);
                                } // if end @ [8:51]
                                // IfBlockBegin @ [8:102]
                                __internal.aboutToExecutePosInTemplate(8, 102);
                                if (i.index() == value.size() - 1) {
                                    // ValueExpression @ [8:138]
                                    __internal.aboutToExecutePosInTemplate(8, 138);
                                    __internal.renderValue(u, false);
                                    // PlainText @ [8:140]
                                    __internal.aboutToExecutePosInTemplate(8, 140);
                                    __internal.writeValue(PLAIN_TEXT_4_0);
                                    // ValueExpression @ [8:143]
                                    __internal.aboutToExecutePosInTemplate(8, 143);
                                    __internal.renderValue(item, false);
                                    // PlainText @ [8:148]
                                    __internal.aboutToExecutePosInTemplate(8, 148);
                                    __internal.writeValue(PLAIN_TEXT_6_0);
                                    // IfBlockEnd @ [8:102]
                                    __internal.aboutToExecutePosInTemplate(8, 102);
                                } // if end @ [8:102]
                                // WithBlockEnd @ [8:9]
                                __internal.aboutToExecutePosInTemplate(8, 9);
                            }); // with end @ [8:9]
                            // PlainText @ [8:153]
                            __internal.aboutToExecutePosInTemplate(8, 153);
                            __internal.writeValue(PLAIN_TEXT_3_0);
                            // ForBlockEnd @ [7:9]
                            __internal.aboutToExecutePosInTemplate(7, 9);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    }); // for end @ [7:9]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [9:10]
                __internal.aboutToExecutePosInTemplate(9, 10);
                __internal.writeValue(PLAIN_TEXT_7_0);
                // ValueExpression @ [11:23]
                __internal.aboutToExecutePosInTemplate(11, 23);
                __internal.renderValue(prop.get("type"), false);
                // PlainText @ [11:40]
                __internal.aboutToExecutePosInTemplate(11, 40);
                __internal.writeValue(PLAIN_TEXT_8_0);
                // ValueExpression @ [13:9]
                __internal.aboutToExecutePosInTemplate(13, 9);
                __internal.renderValue(prop.get("nameWithEnum"), false);
                // PlainText @ [13:34]
                __internal.aboutToExecutePosInTemplate(13, 34);
                __internal.writeValue(PLAIN_TEXT_9_0);
                // ValueExpression @ [13:35]
                __internal.aboutToExecutePosInTemplate(13, 35);
                __internal.renderValue(prop.get("type"), false);
                // PlainText @ [13:52]
                __internal.aboutToExecutePosInTemplate(13, 52);
                __internal.writeValue(PLAIN_TEXT_10_0);
                // ValueExpression @ [22:23]
                __internal.aboutToExecutePosInTemplate(22, 23);
                __internal.renderValue(prop.get("nameWithEnum"), false);
                // PlainText @ [22:48]
                __internal.aboutToExecutePosInTemplate(22, 48);
                __internal.writeValue(PLAIN_TEXT_11_0);
                // ValueExpression @ [23:18]
                __internal.aboutToExecutePosInTemplate(23, 18);
                __internal.renderValue(prop.get("nameWithEnum"), false);
                // PlainText @ [23:43]
                __internal.aboutToExecutePosInTemplate(23, 43);
                __internal.writeValue(PLAIN_TEXT_12_0);
                // ValueExpression @ [23:48]
                __internal.aboutToExecutePosInTemplate(23, 48);
                __internal.renderValue(v, false);
                // PlainText @ [23:50]
                __internal.aboutToExecutePosInTemplate(23, 50);
                __internal.writeValue(PLAIN_TEXT_13_0);
                // ValueExpression @ [32:13]
                __internal.aboutToExecutePosInTemplate(32, 13);
                __internal.renderValue(prop.get("nameWithEnum"), false);
                // PlainText @ [32:38]
                __internal.aboutToExecutePosInTemplate(32, 38);
                __internal.writeValue(PLAIN_TEXT_14_0);
                // ValueExpression @ [32:39]
                __internal.aboutToExecutePosInTemplate(32, 39);
                __internal.renderValue(prop.get("name"), false);
                // PlainText @ [32:56]
                __internal.aboutToExecutePosInTemplate(32, 56);
                __internal.writeValue(PLAIN_TEXT_15_0);
                // WithBlockEnd @ [5:5]
                __internal.aboutToExecutePosInTemplate(5, 5);
            }); // with end @ [5:5]
        }
    }
    private static class WithBlocksGenerated0 { 
        interface WithStatementConsumer2<V0, V1> { 

            void accept(V0 v0, V1 v1) throws IOException;

        }
        static public <V0, V1> void with (V0 v0, V1 v1, boolean nullSafe, WithStatementConsumer2<V0, V1> consumer) throws IOException {
            consumer.accept(v0, v1);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n    ";
        static private final String PLAIN_TEXT_1_0 = "\n    public enum ";
        static private final String PLAIN_TEXT_2_0 = " {\n        ";
        static private final String PLAIN_TEXT_3_0 = "\n        ";
        static private final String PLAIN_TEXT_4_0 = " (\"";
        static private final String PLAIN_TEXT_5_0 = "\"),";
        static private final String PLAIN_TEXT_6_0 = "\");";
        static private final String PLAIN_TEXT_7_0 = "\n\n        private final ";
        static private final String PLAIN_TEXT_8_0 = " value;\n\n        ";
        static private final String PLAIN_TEXT_9_0 = "(";
        static private final String PLAIN_TEXT_10_0 = " value) {\n            this.value = value;\n        }\n\n        @Override\n        public String toString() {\n            return String.valueOf(value);\n        }\n\n        public static ";
        static private final String PLAIN_TEXT_11_0 = " fromValue(String text) {\n            for (";
        static private final String PLAIN_TEXT_12_0 = " b : ";
        static private final String PLAIN_TEXT_13_0 = ") {\n                if (String.valueOf(b.value).equals(text)) {\n                return b;\n                }\n            }\n            return null;\n        }\n    }\n\n    private ";
        static private final String PLAIN_TEXT_14_0 = " ";
        static private final String PLAIN_TEXT_15_0 = ";\n\n    ";

    }

}
