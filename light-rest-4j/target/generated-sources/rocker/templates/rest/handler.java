package templates.rest;

import javax.annotation.Generated;
import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import org.apache.commons.text.StringEscapeUtils;

/*
 * Auto generated code to render template templates/rest/handler.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@Generated("com.fizzed.rocker.compiler.JavaGenerator") @SuppressWarnings("unused")
public class handler extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public final com.fizzed.rocker.ContentType CONTENT_TYPE = com.fizzed.rocker.ContentType.RAW;
    static public final String TEMPLATE_NAME = "handler.rocker.raw";
    static public final String TEMPLATE_PACKAGE_NAME = "templates.rest";
    static public final String HEADER_HASH = "354009500";
    static public final long MODIFIED_AT = 1518543981000L;
    static public final String[] ARGUMENT_NAMES = { "handlerPackage", "className", "example" };

    // argument @ [2:2]
    private String handlerPackage;
    // argument @ [2:2]
    private String className;
    // argument @ [2:2]
    private String example;

    public handler handlerPackage(String handlerPackage) {
        this.handlerPackage = handlerPackage;
        return this;
    }

    public String handlerPackage() {
        return this.handlerPackage;
    }

    public handler className(String className) {
        this.className = className;
        return this;
    }

    public String className() {
        return this.className;
    }

    public handler example(String example) {
        this.example = example;
        return this;
    }

    public String example() {
        return this.example;
    }

    static public handler template(String handlerPackage, String className, String example) {
        return new handler()
            .handlerPackage(handlerPackage)
            .className(className)
            .example(example);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \npackage 
        static private final byte[] PLAIN_TEXT_0_0;
        // ;\n\nimport io.undertow.server.HttpHandler;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.HttpString;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class 
        static private final byte[] PLAIN_TEXT_1_0;
        //  implements HttpHandler {\n    @Override\n    public void handleRequest(HttpServerExchange exchange) throws Exception {\n        
        static private final byte[] PLAIN_TEXT_2_0;
        // \n            exchange.getResponseHeaders().add(new HttpString(\"Content-Type\"), \"application/json\");\n            
        static private final byte[] PLAIN_TEXT_3_0;
        //  exchange.getResponseSender().send(\"
        static private final byte[] PLAIN_TEXT_4_0;
        // \");
        static private final byte[] PLAIN_TEXT_5_0;
        // \n        
        static private final byte[] PLAIN_TEXT_6_0;
        // \n            exchange.endExchange();\n        
        static private final byte[] PLAIN_TEXT_7_0;
        // \n    }\n}\n
        static private final byte[] PLAIN_TEXT_8_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(handler.class.getClassLoader(), handler.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
        }

        // argument @ [2:2]
        protected final String handlerPackage;
        // argument @ [2:2]
        protected final String className;
        // argument @ [2:2]
        protected final String example;

        public Template(handler model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(CONTENT_TYPE);
            __internal.setTemplateName(TEMPLATE_NAME);
            __internal.setTemplatePackageName(TEMPLATE_PACKAGE_NAME);
            this.handlerPackage = model.handlerPackage();
            this.className = model.className();
            this.example = model.example();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [2:64]
            __internal.aboutToExecutePosInTemplate(2, 64);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [3:9]
            __internal.aboutToExecutePosInTemplate(3, 9);
            __internal.renderValue(handlerPackage, false);
            // PlainText @ [3:24]
            __internal.aboutToExecutePosInTemplate(3, 24);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // ValueExpression @ [11:14]
            __internal.aboutToExecutePosInTemplate(11, 14);
            __internal.renderValue(className, false);
            // PlainText @ [11:24]
            __internal.aboutToExecutePosInTemplate(11, 24);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // IfBlockBegin @ [14:9]
            __internal.aboutToExecutePosInTemplate(14, 9);
            if (example != null) {
                // PlainText @ [14:31]
                __internal.aboutToExecutePosInTemplate(14, 31);
                __internal.writeValue(PLAIN_TEXT_3_0);
                // WithBlockBegin @ [16:13]
                __internal.aboutToExecutePosInTemplate(16, 13);
                com.fizzed.rocker.runtime.WithBlock.with(StringEscapeUtils.escapeJson(example), false, (e) -> {
                    // PlainText @ [16:64]
                    __internal.aboutToExecutePosInTemplate(16, 64);
                    __internal.writeValue(PLAIN_TEXT_4_0);
                    // ValueExpression @ [16:100]
                    __internal.aboutToExecutePosInTemplate(16, 100);
                    __internal.renderValue(e, false);
                    // PlainText @ [16:102]
                    __internal.aboutToExecutePosInTemplate(16, 102);
                    __internal.writeValue(PLAIN_TEXT_5_0);
                    // WithBlockEnd @ [16:13]
                    __internal.aboutToExecutePosInTemplate(16, 13);
                }); // with end @ [16:13]
                // PlainText @ [16:106]
                __internal.aboutToExecutePosInTemplate(16, 106);
                __internal.writeValue(PLAIN_TEXT_6_0);
                // IfBlockElse @ [17:9]
                __internal.aboutToExecutePosInTemplate(17, 9);
            } else { // else @ [17:9]
                // PlainText @ [17:17]
                __internal.aboutToExecutePosInTemplate(17, 17);
                __internal.writeValue(PLAIN_TEXT_7_0);
                // IfBlockEnd @ [14:9]
                __internal.aboutToExecutePosInTemplate(14, 9);
            } // if end @ [14:9]
            // PlainText @ [19:10]
            __internal.aboutToExecutePosInTemplate(19, 10);
            __internal.writeValue(PLAIN_TEXT_8_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\npackage ";
        static private final String PLAIN_TEXT_1_0 = ";\n\nimport io.undertow.server.HttpHandler;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.HttpString;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ";
        static private final String PLAIN_TEXT_2_0 = " implements HttpHandler {\n    @Override\n    public void handleRequest(HttpServerExchange exchange) throws Exception {\n        ";
        static private final String PLAIN_TEXT_3_0 = "\n            exchange.getResponseHeaders().add(new HttpString(\"Content-Type\"), \"application/json\");\n            ";
        static private final String PLAIN_TEXT_4_0 = " exchange.getResponseSender().send(\"";
        static private final String PLAIN_TEXT_5_0 = "\");";
        static private final String PLAIN_TEXT_6_0 = "\n        ";
        static private final String PLAIN_TEXT_7_0 = "\n            exchange.endExchange();\n        ";
        static private final String PLAIN_TEXT_8_0 = "\n    }\n}\n";

    }

}
